call plug#begin('~/.vim/plugged')

" Common Plugins =======================================================

" Theme ===================================

Plug 'rafi/awesome-vim-colorschemes'
Plug 'bling/vim-airline'

" Movement ================================

Plug 'rhysd/clever-f.vim'

" Preferences =============================

Plug 'tpope/vim-sensible'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'

" Utilities ===============================

Plug 'preservim/nerdcommenter'
let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1
let g:NERDToggleCheckAllLines = 1

Plug 'preservim/nerdtree'
map <F2> :NERDTreeFind<CR>

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install' }
nnoremap <C-p> :FZF<cr>

" Plug 'sjl/gundo.vim'
" nnoremap <F5> :GundoToggle<CR>

" Multiple buffers search and replace
Plug 'pelodelfuego/vim-swoop'

"Plug 'Shougo/unite.vim'
"let g:unite_data_directory='~/.vim/.cache/unite'
"let g:unite_winheight=40
"let g:unite_split_rule='belowright'
"let g:unite_enable_start_insert=1
"let g:unite_source_history_yank_enable=1
"let g:unite_source_rec_max_cache_files=5000
"let g:unite_source_file_mru_limit = 200

"if executable('ag')
"" unite
  "let g:unite_source_grep_command='ag'
  "let g:unite_source_grep_default_opts='-S --nogroup --nocolor --ignore-dir fixtures'
  "let g:unite_source_grep_recursive_opt=''
"endif

"function! s:unite_settings()
  "" Overwrite settings.
  "nnoremap <silent><buffer><expr> v unite#do_action('vsplit')
  "inoremap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
"endfunction

"autocmd FileType unite call s:unite_settings()

" nnoremap <C-p> :Unite -toggle file_rec file_mru buffer<cr>
" nnoremap <space>/ :Unite -no-quit grep:.<cr>
" nnoremap <space>y :Unite history/yank<cr>
" nnoremap <space>s :Unite -quick-match buffer<cr>

" Syntax ==================================

Plug 'majutsushi/tagbar'
Plug 'Raimondi/delimitMate'
let delimitMate_expand_cr = 1

Plug 'dense-analysis/ale'
let g:ale_linters = {
\   'javascript': ['eslint'],
\   'swift': ['swiftlint'],
\}
let b:ale_fixers = ['eslint']
let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

function ALE() abort
    return exists('*ALEGetStatusLine') ? ALEGetStatusLine() : ''
endfunction
let g:airline_section_error = '%{ALE()}'

Plug 'Shougo/echodoc'
let g:echodoc_enable_at_startup = 1
set cmdheight=2

if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif

let g:deoplete#enable_at_startup = 1

" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>""

autocmd FileType swift imap <buffer> <C-k> <Plug>(autocomplete_swift_jump_to_placeholder)

Plug 'vasconcelloslf/vim-interestingwords'
" javascript plugins ===================================================
autocmd Filetype javascript setlocal ts=2 sts=2 sw=2

Plug 'elzr/vim-json', { 'for': [ 'js', 'javascript', 'json' ] }

Plug 'ethankao/vim-mocha-run', { 'for': [ 'js', 'javascript', 'json' ] }

Plug 'heavenshell/vim-jsdoc', { 'for': [ 'js', 'javascript', 'json' ] }

" Plug 'marijnh/tern_for_vim', { 'for': [ 'js', 'javascript', 'json' ], 'do': 'npm install' }

" let g:tern_map_keys=1
" set completeopt-=preview

Plug 'pangloss/vim-javascript', { 'for': [ 'js', 'javascript', 'json' ] }

" iOS ==================================================================
autocmd Filetype objc setlocal ts=4 sts=4 sw=4
autocmd Filetype swift setlocal ts=4 sts=4 sw=4

Plug 'derekwyatt/vim-fswitch', { 'for': 'objc' }
Plug 'b4winckler/vim-objc', { 'for': 'objc' }
Plug 'keith/swift.vim', { 'for': 'swift' }

" GO ==================================================================
autocmd FileType go setlocal ts=2 sts=2 sw=2 nolist

Plug 'fatih/vim-go', { 'for': 'go' }
Plug 'solarnz/thrift.vim', { 'for': 'thrift' }

au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)

au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)

au FileType go nmap <Leader>s <Plug>(go-implements)
au FileType go nmap <Leader>e <Plug>(go-rename)

let g:go_fmt_command = "goimports"
"let g:go_fmt_autosave = 0
"let g:go_list_type = "quickfix"
"let g:go_term_mode = "split"
"let g:go_term_enabled = 1

call plug#end()

